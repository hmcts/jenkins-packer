name: Jenkins Agent Packer

schedules:
  # Run once a week
  - cron: '0 2 * * 1' # Every monday at 2am UTC
    displayName: Weekly scheduled build # friendly name given to a specific schedule
    branches:
      include:
        - master
    always: true

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - azure-pipelines.yml
      - jenkins-agent-ubuntu.pkr.hcl
      - provision-jenkins-ubuntu-agent.sh

pr:
  branches:
    include:
      - master

resources:
  repositories:
  - repository: azure-devops-templates
    type: github
    ref: refs/heads/master
    name: hmcts/azure-devops-templates
    endpoint: 'hmcts'

variables:
  - name: major_minor_version # Major and minor version that will be used for non PR images - matches OS version
    value: '24.04'

stages:
  - stage: build
    jobs:
      - job: get_azure_image_version
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2.208.0
            displayName: Get latest azure image version
            name: get_azure_image_version
            inputs:
              azureSubscription: dts-management-prod-intsvc
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                AZURE_IMAGE_VERSION=$(az sig image-version list --gallery-image-definition jenkins-ubuntu-v2 --gallery-name hmcts --resource-group hmcts-image-gallery-rg --query "[?starts_with(name, '$(major_minor_version).')].{name:name}" -o tsv | sort -V | tail -n1)
                if [ -z "$AZURE_IMAGE_VERSION" ]; then
                    AZURE_IMAGE_VERSION="$(major_minor_version).0"
                else
                    IFS=. read -r major minor patch <<<"$AZURE_IMAGE_VERSION"
                    ((patch++))
                    printf -v AZURE_IMAGE_VERSION '%d.%02d.%d' "$major" "$minor" "$((patch))"
                fi

                echo $AZURE_IMAGE_VERSION
                echo "##vso[task.setvariable variable=azure_image_version;isoutput=true]$AZURE_IMAGE_VERSION"

      - job: build_image
        pool:
          vmImage: 'ubuntu-latest'
        dependsOn: get_azure_image_version
        strategy:
          matrix:
            Ubuntu-amd64:
              image_name: 'jenkins-ubuntu-v2'
              image_sku: server
              templatePath: jenkins-agent-ubuntu.pkr.hcl
              vm_size: 'Standard_D4ds_v5'
        timeoutInMinutes: '120'
        variables:
          azure_image_version: $[ dependencies.get_azure_image_version.outputs['get_azure_image_version.azure_image_version'] ]
        steps:
          - checkout: self

          - task: AzureCLI@2.208.0
            displayName: Delete any lingering packer resource groups
            name: delete_packer_resource_groups
            inputs:
              azureSubscription: dts-management-prod-intsvc
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                groups=$(az group list --tag 'imagetype=$(image_name)' | jq -r '.[].name')
                for group in ${groups[@]}; do
                echo "deleting resource group $group"
                az group delete --name $group --yes
                done

          - template: ../templates\Azure\KeyVault\get-secret.yaml
            parameters: 
              azureSubscription: 'DTS-CFTPTL-INTSVC'
              keyVaultName: 'cftptl-intsvc'
              secretKeyName: 'jenkins-ssh-private-key'
              taskName: 'secret'

          - task: AzureCLI@2
            displayName: Get ssh key from key vault
            inputs:
              azureSubscription: ${{ parameters.serviceConnection }}
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az account set -s ${{ parameters.serviceConnection }}
                SUB_ID=$(az account show --query id -o tsv)
                TENANT_ID=$(az account show --query tenantId -o tsv)

                echo $SUB_ID
                echo "##vso[task.setvariable variable=${{ parameters.subscriptionIdVariableName }}]$SUB_ID"
                echo $TENANT_ID
                echo "##vso[task.setvariable variable=${{ parameters.tenantIdVariableName }}]$TENANT_ID"

                FIRST=$(echo $SUB_ID | cut -c 1-8)
                SECOND=$(echo $SUB_ID | cut -c 25-36)
                JOINT=c${FIRST}${SECOND}
                
                KEY_VAULT=${JOINT}kv
                STORAGE_ACCOUNT=${JOINT}sa

                echo KeyVault: $KEY_VAULT
                echo "##vso[task.setvariable variable=${{ parameters.keyVaultVariableName }}]$KEY_VAULT"
                echo Storage account: $STORAGE_ACCOUNT
                echo "##vso[task.setvariable variable=${{ parameters.storageAccountVariableName }}]$STORAGE_ACCOUNT"

                lowerCaseEnv=$(echo "${{ parameters.environment }}" | tr "[:upper:]" "[:lower:]")
                echo "##vso[task.setvariable variable="${{ parameters.envVariableName }}"]$lowerCaseEnv"
                echo Lower case env: $lowerCaseEnv

          - task: riezebosch.Packer.PackerTool.PackerTool@0
            displayName: 'Install Packer'
            inputs:
              version: 1.9.1

          - task: riezebosch.Packer.Packer.Packer@1
            displayName: 'Init'
            inputs:
              templatePath: $(templatePath)
              command: init
              azureSubscription: dts-management-prod-intsvc

          - task: riezebosch.Packer.Packer.Packer@1
            displayName: 'Validate'
            inputs:
              templatePath: $(templatePath)
              command: validate
              azureSubscription: dts-management-prod-intsvc

          - task: riezebosch.Packer.Packer.Packer@1
            displayName: 'PR Build'
            name: prbuild
            condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              templatePath: $(templatePath)
              variables: |
                azure_image_version=$(System.PullRequest.PullRequestNumber).0.0
                image_name=$(image_name)
                jenkins_ssh_key=$(secret.prop.value)
                image_sku=$(image_sku)
                vm_size=$(vm_size)
              command: build
              azureSubscription: dts-management-prod-intsvc
              options: --only=azure-arm.pr-build-and-publish

          - task: AzureCLI@2.208.0
            displayName: Cleanup resources on fail
            condition: failed()
            inputs:
              azureSubscription: dts-management-prod-intsvc
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                resource_group_name=$(echo $(prbuild.DeploymentName) | sed 's/pkrdp//')
                az group delete --name "pkr-Resource-Group-${resource_group_name}" --yes

          - task: AzureKeyVault@2
            displayName: Get Github API token
            condition: and(succeededOrFailed(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              azureSubscription: dts-management-prod-intsvc
              KeyVaultName: cftptl-intsvc
              SecretsFilter: github-management-api-token

          - task: AzureCLI@2.208.0
            displayName: Check if PR build image should be kept
            condition: and(succeededOrFailed(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
            name: check_pr_label
            inputs:
              azureSubscription: dts-management-prod-intsvc
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                KEEP_IMAGE_LABEL=$(curl -s -H "Authorization Bearer $(github-management-api-token)" \
                https://api.github.com/repos/hmcts/jenkins-packer/issues/$(System.PullRequest.PullRequestNumber)/labels | jq -r '.[] | select(.name == "keep_image")')

                if [ -z "$KEEP_IMAGE_LABEL" ]; then
                  echo "No keep-image label found, deleting image"
                  echo "##vso[task.setvariable variable=delete_image;isOutput=true]true"
                else
                  echo "keep-image label found, keeping image"
                  echo "##vso[task.setvariable variable=delete_image;isOutput=true]false"
                fi

          - task: AzureCLI@2.208.0
            displayName: Delete published PR build image version
            condition: and(succeededOrFailed(), ne(variables['Build.SourceBranch'], 'refs/heads/master') , eq(variables['check_pr_label.delete_image'], 'true'))
            name: delete_pr_azure_image_version
            inputs:
              azureSubscription: dts-management-prod-intsvc
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az sig image-version delete --gallery-image-version $(System.PullRequest.PullRequestNumber).0.0 --gallery-image-definition $(image_name) --gallery-name hmcts --resource-group hmcts-image-gallery-rg

          - task: riezebosch.Packer.Packer.Packer@1
            displayName: 'Master Build'
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              templatePath: $(templatePath)
              variables: |
                azure_image_version=$(azure_image_version)
                image_name=$(image_name)
                jenkins_ssh_key=$(secret.prop.value)
                image_sku=$(image_sku)
                vm_size=$(vm_size)
              command: build
              azureSubscription: dts-management-prod-intsvc
              options: --only=azure-arm.master-build-and-publish

  - stage: release
    dependsOn: build
    jobs:
      - job: Publish_release
        pool:
          vmImage: 'ubuntu-latest'
        timeoutInMinutes: '120'
        variables:
          azure_image_version: $[ stageDependencies.build.get_azure_image_version.outputs['get_azure_image_version.azure_image_version'] ]
        steps:
          - checkout: self

          - task: GitHubRelease@1
            displayName: Create GitHubRelease
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              gitHubConnection: 'GitHub Management - Full Repo Access'
              repositoryName: '$(Build.Repository.Name)'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'userSpecifiedTag'
              tag: '$(azure_image_version)'
              title: '$(azure_image_version)'
              releaseNotesSource: inline
              releaseNotesInline: 'Regular maintenance updates for non-pinned packages'
              addChangeLog: true
              compareWith: 'lastFullRelease'
